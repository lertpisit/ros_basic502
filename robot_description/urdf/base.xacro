<?xml version="1.0"?>
<robot name= "robot_base" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:macro name="base" params="name">
        <link name="base_ground"/>

      
        <link name="base_link">
            <visual>
                <origin xyz="-0.02 0 0" rpy = "0 0 0 "/>
                <geometry>
                    <box size="${SIZE_BASE}"/>
                </geometry>
            </visual>

            <collision>
                <origin xyz="-0.02 0 0" rpy = "0 0 0 "/>
                    <geometry>
                        <box size="${SIZE_BASE}"/>
                    </geometry>
            </collision>

            <inertial>
                <origin xyz="-0.02 0 0" rpy="0.0 0.0 0.0"/>
                <mass value="0.5"/>
                <inertia ixx="0.009" ixy="0.0" ixz="0.0" iyy="0.0015" iyz="0.0" izz="0.0023"/>
            </inertial>
            
        </link>

        <link name="caster_holder">
            <visual>
                <origin xyz="0 0 0" rpy = "0 0 0 "/>
                <geometry>
                    <cylinder radius="${RADIUS_CASTER_HOLDER}" length="${LENGHT_CASTER_HOLDER}"/>
                </geometry>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy = "0 0 0 "/>
                <geometry>
                    <cylinder radius="${RADIUS_CASTER_HOLDER}" length="${LENGHT_CASTER_HOLDER}"/>
                </geometry>
            </collision>
            <inertial>
                <origin xyz="${COM_CASTER_HOLDER}" rpy="0.0 0.0 0.0"/>
                <mass value="${MASS_CASTER_HOLDER}"/>
                <inertia ixx="${Ixx_caster_holder}" ixy="${Ixy_caster_holder}" ixz="${Ixz_caster_holder}" iyy="${Iyy_caster_holder}" iyz="${Iyz_caster_holder}" izz="${Izz_caster_holder}"/>
            </inertial>


        </link>
        
        <link name="caster_wheel">
            <visual>
                <origin xyz="0 0 0" rpy = "0 0 0 "/>
                <geometry>
                        <sphere radius="${RADIUS_CASTER_WHEEL}"/>
                </geometry>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy = "0 0 0 "/>
            <geometry>
                    <sphere radius="${RADIUS_CASTER_WHEEL}"/>
            </geometry>
            </collision>
            <inertial>
                <origin xyz="${COM_CASTER_WHEEL}" rpy="0.0 0.0 0.0"/>
                <mass value="${MASS_CASTER_WHEEL}"/>
                <inertia ixx="${Ixx_caster_wheel}" ixy="${Ixy_caster_wheel}" ixz="${Ixz_caster_wheel}" iyy="${Iyy_caster_wheel}" iyz="${Iyz_caster_wheel}" izz="${Izz_caster_wheel}"/>
            </inertial>

        </link>

        <joint name="joint_base" type="fixed">
            <origin xyz="0 0.0 0.0325" rpy="0.0 0.0 0.0"/>
            <parent link="base_ground"/>
            <child link="base_link"/>
        </joint>

         <joint name="base2casterHolder" type="fixed">
            <origin xyz="-0.115 0.0 -0.0175" rpy="0.0 0.0 0.0"/>
            <parent link="base_link"/>
            <child link="caster_holder"/>
        </joint>

         <joint name="casterHolder2wheel" type="fixed">
            <origin xyz="0.0 0.0 -0.005" rpy="0.0 0.0 0.0"/>
            <parent link="caster_holder"/>
            <child link="caster_wheel"/>
        </joint>

        <gazebo reference="base_link">
            <mu>2.0</mu>
            <mu2>2.0</mu2>
            <material>
                Gazebo/Blue
            </material>    
        </gazebo>

        <gazebo reference="caster_holder">
            <mu>0</mu>
            <mu2>0</mu2>
            <material>
                Gazebo/Blue
            </material>    
        </gazebo>

        <gazebo reference="caster_wheel">
            <mu>0</mu>
            <mu2>0</mu2>
            <material>
                Gazebo/Black
            </material>    
        </gazebo>

        <gazebo>
            <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
          
                <alwaysOn>true</alwaysOn>
                <!-- Plugin update rate in Hz -->
                <updateRate>${update_rate}</updateRate>
          
                <!-- Name of left joint, defaults to `left_joint` -->
                <leftJoint>left_wheel_joint</leftJoint>
          
                <!-- Name of right joint, defaults to `right_joint` -->
                <rightJoint>right_wheel_joint</rightJoint>
            
                <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
                <wheelSeparation>0.17</wheelSeparation>
            
                <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
                <wheelDiameter>0.12</wheelDiameter>
            
                <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
                <wheelAcceleration>1.0</wheelAcceleration>
            
                <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
                <wheelTorque>20</wheelTorque>
            
                <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
                <commandTopic>cmd_vel</commandTopic>
            
                <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
                <odometryTopic>odom</odometryTopic>
            
                <!-- Odometry frame, defaults to `odom` -->
                <odometryFrame>odom</odometryFrame>
            
                <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
                <robotBaseFrame>base_ground</robotBaseFrame>
            
                <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
                <odometrySource>world</odometrySource>
            
                <!-- Set to true to publish transforms for the wheel links, defaults to false -->
                <publishWheelTF>true</publishWheelTF>
            
                <!-- Set to true to publish transforms for the odometry, defaults to true -->
                <publishOdom>true</publishOdom>
            
                <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
                <publishWheelJointState>true</publishWheelJointState>
                <rosDebugLevel>na</rosDebugLevel>

                <!-- Set to true to swap right and left wheels, defaults to true -->
                <legacyMode>false</legacyMode>
                <publishOdomTF>true</publishOdomTF>
                <publishTf>1</publishTf>
            </plugin>
          </gazebo>


    </xacro:macro>

</robot>